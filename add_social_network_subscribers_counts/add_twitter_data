#!/usr/bin/env node
const addData = require('./add_data')
const fetch = require('node-fetch')
const cheerio = require('cheerio')
const { red, yellow } = require('chalk')
const wait = ms => new Promise(resolve => setTimeout(resolve, ms))

const getAndAddData = entry => {
  const { twitter } = entry
  return getPage(twitter)
  .then(html => {
    const $ = cheerio.load(html)
    var count = $(`[href="/${twitter}/followers"]`).text()
      .replace('Followers', '')
      .trim()
      .replace(/,/g, '')

    if (/^\d+$/.test(count)) {
      console.log(twitter, count)
      entry.subscribers = parseInt(count)
    } else {
      entry.couldntRead = true
      console.error(red('couldnt read'), twitter, count)
    }
  })
  .catch(async err => {
    if (err.statusCode === 429 || err.statusCode >= 500) {
      console.log(yellow('too many requests: waiting...'), 'status code:', err.statusCode)

      countDown()

      await wait(60*1000)
      return getAndAddData(entry)
    }
    if (err.statusCode === 404) {
      entry.notFound = true
      console.log(entry)
      return
    }
    throw err
  })
}

const getPage = twitter => {
  return fetch(`https://mobile.twitter.com/${twitter}`).then(res => res.json())
}

const countDown = () => {
  var remaingSeconds = 60
  const logTime = () => {
    remaingSeconds -= 1
    const time = remaingSeconds.toString().padStart(2, ' ') + 's'
    process.stdout.write(time + '\r')
    if (remaingSeconds > 1) setTimeout(logTime, 1000)
  }
  setTimeout(logTime, 1000)
}

addData({ label: 'twitter', getAndAddData })
